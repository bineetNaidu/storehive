// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role Role @default(USER)

  orders  Order[]
  reviews Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String
  price         Float
  image         String
  stockCount    Int      @default(0) @map("stock_count")
  metadata      Json?
  isFeatured    Boolean  @default(false) @map("is_featured")
  isSoftDeleted Boolean  @default(false) @map("is_soft_deleted")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  categories Category[]
  reviews    Review[]
  orderItems OrderItem[]
  variations Variation[]

  @@map("products")
}

enum Size {
  XXXS
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum VariationType {
  COLOR
  SIZE
}

model Variation {
  id        Int           @id @default(autoincrement())
  type      VariationType @default(COLOR)
  productId Int           @map("product_id")
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  options   Option[]

  @@unique([type, productId]) // product can only have one variation with the same type
  @@map("variations")
}

model Option {
  id          Int       @id @default(autoincrement())
  name        String
  hex         String?
  size        Size?
  variationId Int       @map("variation_id")
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)

  @@unique([hex, variationId]) // variation can only have one option with the same hex
  @@unique([size, variationId]) // variation can only have one option with the same size
  @@map("options")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber Int         @unique @map("order_number")
  total       Float
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String      @map("user_id")
  items       OrderItem[]

  @@index([userId], name: "idx_order_user")
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@index([orderId], name: "idx_order_item_order")
  @@index([productId], name: "idx_order_item_product")
  @@map("order_items")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int      @map("product_id")

  @@unique([userId, productId]) // user can only review a product once
  @@index([userId], name: "idx_review_user")
  @@index([productId], name: "idx_review_product")
  @@map("reviews")
}
