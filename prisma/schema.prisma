// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://username:password@localhost:5432/storehive_db?schema=public" //env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  orders  Order[]
  reviews Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  categories  Category[]
  reviews     Review[]
  orderItems  OrderItem[]

  @@map("products")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("categories")
}

model Order {
  id          Int         @id @default(autoincrement())
  orderNumber Int         @unique @map("order_number")
  total       Float
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @map("user_id")
  items       OrderItem[]

  @@index([userId], name: "idx_order_user")
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int     @map("order_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@index([orderId], name: "idx_order_item_order")
  @@index([productId], name: "idx_order_item_product")
  @@map("order_items")
}

model Review {
  id        Int      @id @default(autoincrement())
  comment   String
  rating    Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @map("product_id")

  @@index([userId], name: "idx_review_user")
  @@index([productId], name: "idx_review_product")
  @@map("reviews")
}
